workspace(name = "arm_cross_example")

##########################
# rules_haskell preamble
##########################

local_repository(
    name = "rules_haskell",
    path = "../..",
)

# TODO: Remove once aarch64 is properly supported by rules_sh
# // start
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")

git_repository(
    name = "rules_sh",
    commit = "c7627dcc9df2e23e8049475b06f51447ab1e5699",
    remote = "https://github.com/tweag/rules_sh.git",
    patches = [ "@arm_cross_example//:rules_sh-aarch64.patch" ],
    patch_args = [ "-p1" ],
    shallow_since = "1652946935 +0000",
)

# // end

# TODO: Remove once aarch64 is properly supported by rules_nixpkgs
# // start

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive", "http_file")

_rules_nixpkgs_version = "946def9f84deb0829126938e1cc2741fed6054a0"
_rules_nixpkgs_sha256 = "785600c74e6885ec5536c3ef5b881e6118677f48c6e5870759e0ecdeaa3f3ec3"

strip_prefix = "rules_nixpkgs-%s" % _rules_nixpkgs_version

http_archive(
    name = "io_tweag_rules_nixpkgs",
    strip_prefix = strip_prefix,
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/%s.tar.gz" % _rules_nixpkgs_version],
    sha256 = _rules_nixpkgs_sha256,
)

http_archive(
    name = "rules_nixpkgs_core",
    strip_prefix = strip_prefix + "/core",
    patches = [ "@arm_cross_example//:rules_nixpkgs-aarch64.patch" ],
    patch_args = ["-p2"],
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/%s.tar.gz" % _rules_nixpkgs_version],
    sha256 = _rules_nixpkgs_sha256,
)

[ http_archive(
    name = "rules_nixpkgs_" + toolchain,
    strip_prefix = strip_prefix + "/toolchains/" + toolchain,
    urls = ["https://github.com/tweag/rules_nixpkgs/archive/%s.tar.gz" % _rules_nixpkgs_version],
    sha256 = _rules_nixpkgs_sha256,
  ) for toolchain in ["cc", "java", "python", "go", "rust", "posix"] ]

# // end

load(
    "@rules_haskell//haskell:repositories.bzl",
    "rules_haskell_dependencies",
)

rules_haskell_dependencies()

load(
    "@rules_haskell//haskell:cabal.bzl",
    "stack_snapshot",
)
load(
    "@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl",
    "nixpkgs_cc_configure",
    "nixpkgs_git_repository",
    "nixpkgs_package",
    "nixpkgs_python_configure",
)

nixpkgs_git_repository(
    name = "nixpkgs",
    revision = "ad4db3f4d8ae54482c63c31c14921cb73953548d",
)

nixpkgs_python_configure(
    repository = "@nixpkgs",
)

###########################################
# CC toolchains for x86 and arm
###########################################

nixpkgs_cc_configure(
    name = "nixpkgs_config_cc",
    repository = "@nixpkgs",
)

nixpkgs_cc_configure(
    name = "nixpkgs_config_cc_arm",
    attribute_path = "cc-aarch64",
    exec_constraints = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    nix_file = "//:arm-cross.nix",
    repository = "@nixpkgs",
    target_constraints = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

###########################################
# GHC toolchains for x86 and arm
###########################################

load(
    "@rules_haskell//haskell:nixpkgs.bzl",
    "haskell_register_ghc_nixpkgs",
)

haskell_register_ghc_nixpkgs(
    name = "aarch64",
    attribute_path = "ghc-aarch64",
    exec_constraints = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    nix_file = "//:arm-cross.nix",
    repository = "@nixpkgs",
    static_runtime = True,
    target_constraints = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
    version = "8.10.4",
)

haskell_register_ghc_nixpkgs(
    name = "haskell_compiler",
    attribute_path = "haskell.compiler.ghc8104",
    repositories = {"nixpkgs": "@nixpkgs"},
    version = "8.10.4",
)

############################
# zlib dependencies
############################

nixpkgs_package(
    name = "nixpkgs_zlib_x86",
    attribute_path = "zlib",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "nixpkgs_zlib_arm",
    attribute_path = "pkgsCross.aarch64-multiplatform.zlib",
    repository = "@nixpkgs",
)

nixpkgs_package(
    name = "zlib.dev",
    build_file = "//:BUILD.zlib.bazel",
    repository = "@nixpkgs",
)

stack_snapshot(
    name = "stackage",
    extra_deps = {"zlib": ["@zlib.dev//:zlib"]},
    haddock = False,
    packages = ["zlib"],
    snapshot = "lts-18.0",
)
